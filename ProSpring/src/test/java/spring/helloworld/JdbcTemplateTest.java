package spring.helloworld;

import junit.framework.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCallback;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.core.RowCallbackHandler;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import static junit.framework.Assert.assertEquals;

/**
 * Created by wyzhangdongsheng1 on 14-12-5.
 */
public class JdbcTemplateTest {
    private static JdbcTemplate jdbcTemplate;

    @BeforeClass
    public static void setUpClass() {
        String url = "jdbc:hsqldb:mem:test";
        String username = "sa";
        String password = "";
        DriverManagerDataSource dataSource = new DriverManagerDataSource(url, username, password);
        dataSource.setDriverClassName("org.hsqldb.jdbcDriver");
        jdbcTemplate = new JdbcTemplate(dataSource);
    }

    @Test
    public void test() {
        String sql = "select * from INFORMATION_SCHEMA.SYSTEM_TABLES";
        jdbcTemplate.query(sql, new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                String value = rs.getString("TABLE_NAME");
                System.out.println("Column TABLENAME:" + value);
            }
        });
    }

    @Before
    public void setUp() {
        String createTableSql = "create memory table test" + "(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,name varchar(100))";
        jdbcTemplate.update(createTableSql);
    }

    @After
    public void tearDown() {
        String dropTableSql = "drop table test";
        jdbcTemplate.execute(dropTableSql);
    }

    @Test
    public void testCURD() {
        insert();
        delete();
        update();
        select();

    }

    public void insert() {
        jdbcTemplate.update("insert into test(name) values ('name1')");
        jdbcTemplate.update("insert into test(name) values ('name2')");
        assertEquals(2, jdbcTemplate.queryForInt("select count(*) from test"));
    }

    public void delete() {
        jdbcTemplate.update("delete from test where name = ?", new Object[]{"name2"});
        assertEquals(1, jdbcTemplate.queryForInt("select count(*) from test"));
    }

    public void update() {
        jdbcTemplate.update("update test set name = 'name3' where name = ?", new Object[]{"name1"});
        assertEquals(1, jdbcTemplate.queryForInt("select count(*) from test where name = 'name3'"));
    }

    public void select() {
        jdbcTemplate.query("select * from test", new RowCallbackHandler() {
            @Override
            public void processRow(ResultSet rs) throws SQLException {
                System.out.println("===========================");
                System.out.println("id:" + rs.getString("id"));
                System.out.println("name:" + rs.getString("name"));
                System.out.println("===========================");
            }
        });
    }

    @Test
    public void testPpreparedStatement1() {
        insert();
        int count = jdbcTemplate.execute(new PreparedStatementCreator() {
                                             @Override
                                             public PreparedStatement createPreparedStatement(Connection con) throws SQLException {
                                                 return con.prepareStatement("select count (*) from test ");
                                             }
                                         }, new PreparedStatementCallback<Integer>() {
                                             @Override
                                             public Integer doInPreparedStatement(PreparedStatement ps) throws SQLException, DataAccessException {
                                                 ps.execute();
                                                 ResultSet rs = ps.getResultSet();
                                                 rs.next();
                                                 return rs.getInt(1);
                                             }
                                         }
        );
        assertEquals(count, 2);

    }
}
